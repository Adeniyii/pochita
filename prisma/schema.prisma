// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
}

model Profile {
  id               String    @id @default(cuid())
  owner            User      @relation(fields: [ownerId], references: [id])
  ownerId          String    @unique
  username         String?
  ownedProjects    Project[]
  assignedProjects Project[] @relation("ProjectToMember")
  assignedIssues   Issue[]   @relation("IssueToAssignee")
  reportingIssues  Issue[]

  @@index([ownerId])
}

enum Category {
  SOFTWARE
  MARKETING
  BUSINESS
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String    @db.LongText
  category    Category  @default(SOFTWARE)
  owner       Profile   @relation(fields: [ownerId], references: [id])
  ownerId     String
  members     Profile[] @relation("ProjectToMember")
  issues      Issue[]
  createdAt   DateTime  @default(now())

  @@index([ownerId])
}

enum IssueType {
  BUG
  STORY
  TASK
}

enum IssueStatus {
  BACKLOG
  DONE
  PROGRESS
  SELECTED
}

enum IssuePriority {
  HIGH
  HIGHEST
  LOW
  LOWEST
}

model Issue {
  id            String        @id @default(cuid())
  summary       String
  description   String        @db.LongText
  createdAt     DateTime      @default(now())
  type          IssueType     @default(TASK)
  assignees     Profile[]     @relation("IssueToAssignee")
  reporter      Profile       @relation(fields: [reporterId], references: [id])
  reporterId    String
  project       Project       @relation(fields: [projectId], references: [id])
  projectId     String
  status        IssueStatus   @default(BACKLOG)
  priority      IssuePriority @default(LOW)
  estimatedTime Int?

  @@index([projectId])
  @@index([reporterId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// One issue to be aware of is that implicit many-to-many relations cannot have an index added in this way (@@index([])).
// If query speed or cost is an issue, you may instead want to use an explicit many-to-many relation in this case.
